<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (173,840 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (97,168 samples, 55.90%)</title><rect x="10.0" y="291.0" width="659.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (97,168 samples, 55.90%)</title><rect x="10.0" y="275.0" width="659.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (97,168 samples, 55.90%)</title><rect x="10.0" y="259.0" width="659.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2,297 samples, 1.32%)</title><rect x="10.0" y="243.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (2,297 samples, 1.32%)</title><rect x="10.0" y="227.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2,253 samples, 1.30%)</title><rect x="10.0" y="211.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2,253 samples, 1.30%)</title><rect x="10.0" y="195.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (2,253 samples, 1.30%)</title><rect x="10.0" y="179.0" width="15.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (44 samples, 0.03%)</title><rect x="25.3" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (44 samples, 0.03%)</title><rect x="25.3" y="195.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (44 samples, 0.03%)</title><rect x="25.3" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (44 samples, 0.03%)</title><rect x="25.3" y="163.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.3" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (44 samples, 0.03%)</title><rect x="25.3" y="147.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="28.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$72/662900762.run (43 samples, 0.02%)</title><rect x="25.6" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$flush$6 (43 samples, 0.02%)</title><rect x="25.6" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/SSTable.write (42 samples, 0.02%)</title><rect x="25.6" y="211.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController$$Lambda$69/685464798.run (94,828 samples, 54.55%)</title><rect x="25.9" y="243.0" width="643.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.9" y="254.0">ru/mail/polis/service/ivlev/ThreadController$$Lambda$69/685464798.run</text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.lambda$put$2 (94,828 samples, 54.55%)</title><rect x="25.9" y="227.0" width="643.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.9" y="238.0">ru/mail/polis/service/ivlev/ThreadController.lambda$put$2</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,864 samples, 1.65%)</title><rect x="25.9" y="211.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,864 samples, 1.65%)</title><rect x="25.9" y="195.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.9" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,864 samples, 1.65%)</title><rect x="25.9" y="179.0" width="19.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="28.9" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Response (1,506 samples, 0.87%)</title><rect x="45.3" y="211.0" width="10.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="48.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7,687 samples, 4.42%)</title><rect x="55.5" y="211.0" width="52.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.5" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7,687 samples, 4.42%)</title><rect x="55.5" y="195.0" width="52.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.5" y="206.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5,251 samples, 3.02%)</title><rect x="55.5" y="179.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.5" y="190.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5,251 samples, 3.02%)</title><rect x="55.5" y="163.0" width="35.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.5" y="174.0">one..</text>
</g>
<g>
<title>byte[] (5,251 samples, 3.02%)</title><rect x="55.5" y="147.0" width="35.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="58.5" y="158.0">byt..</text>
</g>
<g>
<title>one/nio/net/Session.write (2,436 samples, 1.40%)</title><rect x="91.2" y="179.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.2" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2,436 samples, 1.40%)</title><rect x="91.2" y="163.0" width="16.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="94.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5,765 samples, 3.32%)</title><rect x="107.7" y="211.0" width="39.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.7" y="222.0">one..</text>
</g>
<g>
<title>byte[] (2,362 samples, 1.36%)</title><rect x="107.7" y="195.0" width="16.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="110.7" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (1,915 samples, 1.10%)</title><rect x="123.8" y="195.0" width="13.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="126.8" y="206.0"></text>
</g>
<g>
<title>java.lang.String (1,488 samples, 0.86%)</title><rect x="136.8" y="195.0" width="10.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="139.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.upsert (7,498 samples, 4.31%)</title><rect x="146.9" y="211.0" width="50.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.9" y="222.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (75 samples, 0.04%)</title><rect x="146.9" y="195.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (75 samples, 0.04%)</title><rect x="146.9" y="179.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (75 samples, 0.04%)</title><rect x="146.9" y="163.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (69 samples, 0.04%)</title><rect x="146.9" y="147.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.9" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (69 samples, 0.04%)</title><rect x="146.9" y="131.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.9" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (43 samples, 0.02%)</title><rect x="146.9" y="115.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.9" y="126.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (43 samples, 0.02%)</title><rect x="146.9" y="99.0" width="0.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="149.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/MemTable.upsert (7,423 samples, 4.27%)</title><rect x="147.4" y="195.0" width="50.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.4" y="206.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5,902 samples, 3.40%)</title><rect x="147.4" y="179.0" width="40.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.4" y="190.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5,902 samples, 3.40%)</title><rect x="147.4" y="163.0" width="40.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="150.4" y="174.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (40 samples, 0.02%)</title><rect x="187.4" y="179.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (40 samples, 0.02%)</title><rect x="187.4" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.4" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.Value (1,481 samples, 0.85%)</title><rect x="187.7" y="179.0" width="10.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="190.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.equalsUrlNode (10,170 samples, 5.85%)</title><rect x="197.8" y="211.0" width="69.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.8" y="222.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/TopologyImpl.getNodeByKey (10,170 samples, 5.85%)</title><rect x="197.8" y="195.0" width="69.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.8" y="206.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/TopologyImpl.getNodeByKey (10,170 samples, 5.85%)</title><rect x="197.8" y="179.0" width="69.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.8" y="190.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (10,170 samples, 5.85%)</title><rect x="197.8" y="163.0" width="69.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.8" y="174.0">java/la..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1019384604.invoke (10,170 samples, 5.85%)</title><rect x="197.8" y="147.0" width="69.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.8" y="158.0">java/la..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (10,170 samples, 5.85%)</title><rect x="197.8" y="131.0" width="69.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.8" y="142.0">java/la..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (10,170 samples, 5.85%)</title><rect x="197.8" y="115.0" width="69.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.8" y="126.0">java/la..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (10,170 samples, 5.85%)</title><rect x="197.8" y="99.0" width="69.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.8" y="110.0">jdk/int..</text>
</g>
<g>
<title>byte[] (10,170 samples, 5.85%)</title><rect x="197.8" y="83.0" width="69.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="200.8" y="94.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.sendResponseProxy (55,039 samples, 31.66%)</title><rect x="266.8" y="211.0" width="373.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.8" y="222.0">ru/mail/polis/service/ivlev/ThreadController.sendRe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (657 samples, 0.38%)</title><rect x="266.8" y="195.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (657 samples, 0.38%)</title><rect x="266.8" y="179.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.8" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (485 samples, 0.28%)</title><rect x="266.8" y="163.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.8" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (485 samples, 0.28%)</title><rect x="266.8" y="147.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.8" y="158.0"></text>
</g>
<g>
<title>byte[] (485 samples, 0.28%)</title><rect x="266.8" y="131.0" width="3.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="269.8" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (172 samples, 0.10%)</title><rect x="270.1" y="163.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.1" y="174.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (172 samples, 0.10%)</title><rect x="270.1" y="147.0" width="1.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="273.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/TopologyImpl.getNodeByKey (886 samples, 0.51%)</title><rect x="271.2" y="195.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/TopologyImpl.getNodeByKey (886 samples, 0.51%)</title><rect x="271.2" y="179.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (886 samples, 0.51%)</title><rect x="271.2" y="163.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1019384604.invoke (886 samples, 0.51%)</title><rect x="271.2" y="147.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.2" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (886 samples, 0.51%)</title><rect x="271.2" y="131.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.2" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (886 samples, 0.51%)</title><rect x="271.2" y="115.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.2" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (886 samples, 0.51%)</title><rect x="271.2" y="99.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.2" y="110.0"></text>
</g>
<g>
<title>byte[] (886 samples, 0.51%)</title><rect x="271.2" y="83.0" width="6.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="274.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.proxy (53,496 samples, 30.77%)</title><rect x="277.3" y="195.0" width="363.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.3" y="206.0">ru/mail/polis/service/ivlev/ThreadController.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (53,496 samples, 30.77%)</title><rect x="277.3" y="179.0" width="363.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.3" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (53,496 samples, 30.77%)</title><rect x="277.3" y="163.0" width="363.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.3" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (308 samples, 0.18%)</title><rect x="277.3" y="147.0" width="2.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="280.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (49,036 samples, 28.21%)</title><rect x="279.3" y="147.0" width="332.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.3" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (30,787 samples, 17.71%)</title><rect x="279.3" y="131.0" width="209.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="282.3" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (18,249 samples, 10.50%)</title><rect x="488.3" y="131.0" width="123.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="491.3" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3,001 samples, 1.73%)</title><rect x="612.2" y="147.0" width="20.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.2" y="158.0"></text>
</g>
<g>
<title>byte[] (53 samples, 0.03%)</title><rect x="612.2" y="131.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="615.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (106 samples, 0.06%)</title><rect x="612.6" y="131.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (106 samples, 0.06%)</title><rect x="612.6" y="115.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.6" y="126.0"></text>
</g>
<g>
<title>java.lang.String (40 samples, 0.02%)</title><rect x="612.6" y="99.0" width="0.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="615.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (66 samples, 0.04%)</title><rect x="612.8" y="99.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.8" y="110.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.04%)</title><rect x="612.8" y="83.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="615.8" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (44 samples, 0.03%)</title><rect x="613.3" y="131.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="616.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2,549 samples, 1.47%)</title><rect x="613.6" y="131.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.6" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,549 samples, 1.47%)</title><rect x="613.6" y="115.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.6" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,549 samples, 1.47%)</title><rect x="613.6" y="99.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="616.6" y="110.0"></text>
</g>
<g>
<title>char[] (2,001 samples, 1.15%)</title><rect x="613.6" y="83.0" width="13.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="616.6" y="94.0"></text>
</g>
<g>
<title>java.lang.String (245 samples, 0.14%)</title><rect x="627.2" y="83.0" width="1.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="630.2" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (303 samples, 0.17%)</title><rect x="628.8" y="83.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="631.8" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (303 samples, 0.17%)</title><rect x="628.8" y="67.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.8" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (303 samples, 0.17%)</title><rect x="628.8" y="51.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="631.8" y="62.0"></text>
</g>
<g>
<title>byte[] (303 samples, 0.17%)</title><rect x="628.8" y="35.0" width="2.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="631.8" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (77 samples, 0.04%)</title><rect x="630.9" y="131.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (77 samples, 0.04%)</title><rect x="630.9" y="115.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="633.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (172 samples, 0.10%)</title><rect x="631.4" y="131.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (172 samples, 0.10%)</title><rect x="631.4" y="115.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (172 samples, 0.10%)</title><rect x="631.4" y="99.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.4" y="110.0"></text>
</g>
<g>
<title>java.lang.String (77 samples, 0.04%)</title><rect x="631.4" y="83.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="634.4" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (95 samples, 0.05%)</title><rect x="631.9" y="83.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.9" y="94.0"></text>
</g>
<g>
<title>byte[] (95 samples, 0.05%)</title><rect x="631.9" y="67.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="634.9" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (821 samples, 0.47%)</title><rect x="632.6" y="147.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (821 samples, 0.47%)</title><rect x="632.6" y="131.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="635.6" y="142.0"></text>
</g>
<g>
<title>byte[] (821 samples, 0.47%)</title><rect x="632.6" y="115.0" width="5.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="635.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (237 samples, 0.14%)</title><rect x="638.1" y="147.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.1" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (237 samples, 0.14%)</title><rect x="638.1" y="131.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (237 samples, 0.14%)</title><rect x="638.1" y="115.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.1" y="126.0"></text>
</g>
<g>
<title>java.lang.String (96 samples, 0.06%)</title><rect x="638.1" y="99.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="641.1" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (141 samples, 0.08%)</title><rect x="638.8" y="99.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="641.8" y="110.0"></text>
</g>
<g>
<title>byte[] (141 samples, 0.08%)</title><rect x="638.8" y="83.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="641.8" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (93 samples, 0.05%)</title><rect x="639.7" y="147.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.7" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (93 samples, 0.05%)</title><rect x="639.7" y="131.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.7" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (93 samples, 0.05%)</title><rect x="639.7" y="115.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.7" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (93 samples, 0.05%)</title><rect x="639.7" y="99.0" width="0.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="642.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.toByteBuffer (4,299 samples, 2.47%)</title><rect x="640.4" y="211.0" width="29.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="643.4" y="222.0">ru..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,442 samples, 0.83%)</title><rect x="640.4" y="195.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,442 samples, 0.83%)</title><rect x="640.4" y="179.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,442 samples, 0.83%)</title><rect x="640.4" y="163.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.4" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,442 samples, 0.83%)</title><rect x="640.4" y="147.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.4" y="158.0"></text>
</g>
<g>
<title>byte[] (1,442 samples, 0.83%)</title><rect x="640.4" y="131.0" width="9.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="643.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,857 samples, 1.64%)</title><rect x="650.2" y="195.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,857 samples, 1.64%)</title><rect x="650.2" y="179.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="653.2" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,857 samples, 1.64%)</title><rect x="650.2" y="163.0" width="19.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="653.2" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (76,672 samples, 44.10%)</title><rect x="669.6" y="291.0" width="520.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="672.6" y="302.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (3,330 samples, 1.92%)</title><rect x="669.6" y="275.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="672.6" y="286.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (3,330 samples, 1.92%)</title><rect x="669.6" y="259.0" width="22.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="672.6" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (73,342 samples, 42.19%)</title><rect x="692.2" y="275.0" width="497.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.2" y="286.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (73,342 samples, 42.19%)</title><rect x="692.2" y="259.0" width="497.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.2" y="270.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (73,342 samples, 42.19%)</title><rect x="692.2" y="243.0" width="497.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.2" y="254.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (14,175 samples, 8.15%)</title><rect x="692.2" y="227.0" width="96.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.2" y="238.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (14,175 samples, 8.15%)</title><rect x="692.2" y="211.0" width="96.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="695.2" y="222.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (8,504 samples, 4.89%)</title><rect x="692.2" y="195.0" width="57.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.2" y="206.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (5,028 samples, 2.89%)</title><rect x="692.2" y="179.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.2" y="190.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5,028 samples, 2.89%)</title><rect x="692.2" y="163.0" width="34.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="695.2" y="174.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (5,028 samples, 2.89%)</title><rect x="692.2" y="147.0" width="34.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.2" y="158.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5,028 samples, 2.89%)</title><rect x="692.2" y="131.0" width="34.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.2" y="142.0">ja..</text>
</g>
<g>
<title>java.lang.String (2,442 samples, 1.40%)</title><rect x="692.2" y="115.0" width="16.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="695.2" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,586 samples, 1.49%)</title><rect x="708.7" y="115.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.7" y="126.0"></text>
</g>
<g>
<title>byte[] (2,586 samples, 1.49%)</title><rect x="708.7" y="99.0" width="17.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="711.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.put (3,476 samples, 2.00%)</title><rect x="726.3" y="179.0" width="23.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.3" y="190.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,417 samples, 1.97%)</title><rect x="726.3" y="163.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.3" y="174.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,417 samples, 1.97%)</title><rect x="726.3" y="147.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.3" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController$$Lambda$69/685464798.get$Lambda (3,417 samples, 1.97%)</title><rect x="726.3" y="131.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.3" y="142.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.ivlev.ThreadController$$Lambda$69 (3,417 samples, 1.97%)</title><rect x="726.3" y="115.0" width="23.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="729.3" y="126.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (59 samples, 0.03%)</title><rect x="749.5" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (59 samples, 0.03%)</title><rect x="749.5" y="147.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (59 samples, 0.03%)</title><rect x="749.5" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="752.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (59 samples, 0.03%)</title><rect x="749.5" y="115.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="752.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (59 samples, 0.03%)</title><rect x="749.5" y="99.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.5" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (59 samples, 0.03%)</title><rect x="749.5" y="83.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="752.5" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5,671 samples, 3.26%)</title><rect x="749.9" y="195.0" width="38.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.9" y="206.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (5,671 samples, 3.26%)</title><rect x="749.9" y="179.0" width="38.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="752.9" y="190.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5,671 samples, 3.26%)</title><rect x="749.9" y="163.0" width="38.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.9" y="174.0">jav..</text>
</g>
<g>
<title>java.lang.String (2,527 samples, 1.45%)</title><rect x="749.9" y="147.0" width="17.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="752.9" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,144 samples, 1.81%)</title><rect x="767.0" y="147.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="770.0" y="158.0">j..</text>
</g>
<g>
<title>byte[] (3,144 samples, 1.81%)</title><rect x="767.0" y="131.0" width="21.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="770.0" y="142.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (26,635 samples, 15.32%)</title><rect x="788.4" y="227.0" width="180.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.4" y="238.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one.nio.http.Request (4,268 samples, 2.46%)</title><rect x="788.4" y="211.0" width="29.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="791.4" y="222.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8,292 samples, 4.77%)</title><rect x="817.4" y="211.0" width="56.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="820.4" y="222.0">one/ni..</text>
</g>
<g>
<title>java.lang.String[] (8,292 samples, 4.77%)</title><rect x="817.4" y="195.0" width="56.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="820.4" y="206.0">java.l..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,075 samples, 8.10%)</title><rect x="873.6" y="211.0" width="95.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.6" y="222.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,075 samples, 8.10%)</title><rect x="873.6" y="195.0" width="95.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="876.6" y="206.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (7,442 samples, 4.28%)</title><rect x="873.6" y="179.0" width="50.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="876.6" y="190.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,565 samples, 1.48%)</title><rect x="924.2" y="179.0" width="17.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="927.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,068 samples, 2.34%)</title><rect x="941.6" y="179.0" width="27.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.6" y="190.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,068 samples, 2.34%)</title><rect x="941.6" y="163.0" width="27.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.6" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,068 samples, 2.34%)</title><rect x="941.6" y="147.0" width="27.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="944.6" y="158.0">j..</text>
</g>
<g>
<title>byte[] (4,068 samples, 2.34%)</title><rect x="941.6" y="131.0" width="27.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="944.6" y="142.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3,189 samples, 1.83%)</title><rect x="969.2" y="227.0" width="21.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.2" y="238.0">o..</text>
</g>
<g>
<title>byte[] (3,189 samples, 1.83%)</title><rect x="969.2" y="211.0" width="21.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="972.2" y="222.0">b..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4,721 samples, 2.72%)</title><rect x="990.8" y="227.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="993.8" y="238.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (4,721 samples, 2.72%)</title><rect x="990.8" y="211.0" width="32.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="993.8" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,721 samples, 2.72%)</title><rect x="990.8" y="195.0" width="32.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="993.8" y="206.0">ja..</text>
</g>
<g>
<title>java.lang.String (2,344 samples, 1.35%)</title><rect x="990.8" y="179.0" width="15.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="993.8" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,377 samples, 1.37%)</title><rect x="1006.7" y="179.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1009.7" y="190.0"></text>
</g>
<g>
<title>byte[] (2,377 samples, 1.37%)</title><rect x="1006.7" y="163.0" width="16.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1009.7" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24,622 samples, 14.16%)</title><rect x="1022.9" y="227.0" width="167.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1025.9" y="238.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (24,622 samples, 14.16%)</title><rect x="1022.9" y="211.0" width="167.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1025.9" y="222.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (11,544 samples, 6.64%)</title><rect x="1022.9" y="195.0" width="78.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1025.9" y="206.0">char[]</text>
</g>
<g>
<title>java.lang.String (5,067 samples, 2.91%)</title><rect x="1101.2" y="195.0" width="34.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1104.2" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8,011 samples, 4.61%)</title><rect x="1135.6" y="195.0" width="54.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1138.6" y="206.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8,011 samples, 4.61%)</title><rect x="1135.6" y="179.0" width="54.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1138.6" y="190.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (8,011 samples, 4.61%)</title><rect x="1135.6" y="163.0" width="54.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1138.6" y="174.0">java/..</text>
</g>
<g>
<title>byte[] (8,011 samples, 4.61%)</title><rect x="1135.6" y="147.0" width="54.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1138.6" y="158.0">byte[]</text>
</g>
</g>
</svg>
