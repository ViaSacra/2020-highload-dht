<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (6,767 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (3,505 samples, 51.80%)</title><rect x="10.0" y="435.0" width="611.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,505 samples, 51.80%)</title><rect x="10.0" y="419.0" width="611.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,505 samples, 51.80%)</title><rect x="10.0" y="403.0" width="611.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 0.21%)</title><rect x="10.0" y="387.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (14 samples, 0.21%)</title><rect x="10.0" y="371.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 0.21%)</title><rect x="10.0" y="355.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (14 samples, 0.21%)</title><rect x="10.0" y="339.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (14 samples, 0.21%)</title><rect x="10.0" y="323.0" width="2.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController$$Lambda$74/1788524259.run (3,491 samples, 51.59%)</title><rect x="12.4" y="387.0" width="608.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="398.0">ru/mail/polis/service/ivlev/ThreadController$$Lambda$74/1788524259.run</text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.lambda$get$1 (3,491 samples, 51.59%)</title><rect x="12.4" y="371.0" width="608.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.4" y="382.0">ru/mail/polis/service/ivlev/ThreadController.lambda$get$1</text>
</g>
<g>
<title>one.nio.http.Response (14 samples, 0.21%)</title><rect x="12.4" y="355.0" width="2.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="15.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (73 samples, 1.08%)</title><rect x="14.9" y="355.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (73 samples, 1.08%)</title><rect x="14.9" y="339.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (47 samples, 0.69%)</title><rect x="14.9" y="323.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (47 samples, 0.69%)</title><rect x="14.9" y="307.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.9" y="318.0"></text>
</g>
<g>
<title>byte[] (47 samples, 0.69%)</title><rect x="14.9" y="291.0" width="8.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="17.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 0.38%)</title><rect x="23.1" y="323.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.1" y="334.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (26 samples, 0.38%)</title><rect x="23.1" y="307.0" width="4.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="26.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (48 samples, 0.71%)</title><rect x="27.6" y="355.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.6" y="366.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.31%)</title><rect x="27.6" y="339.0" width="3.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="30.6" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (19 samples, 0.28%)</title><rect x="31.3" y="339.0" width="3.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="34.3" y="350.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.12%)</title><rect x="34.6" y="339.0" width="1.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="37.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (3,174 samples, 46.90%)</title><rect x="36.0" y="355.0" width="553.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="39.0" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (382 samples, 5.65%)</title><rect x="36.0" y="339.0" width="66.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.0" y="350.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (382 samples, 5.65%)</title><rect x="36.0" y="323.0" width="66.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.0" y="334.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (382 samples, 5.65%)</title><rect x="36.0" y="307.0" width="66.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.0" y="318.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (382 samples, 5.65%)</title><rect x="36.0" y="291.0" width="66.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.0" y="302.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (382 samples, 5.65%)</title><rect x="36.0" y="275.0" width="66.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.0" y="286.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (334 samples, 4.94%)</title><rect x="36.0" y="259.0" width="58.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.0" y="270.0">com/go..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (334 samples, 4.94%)</title><rect x="36.0" y="243.0" width="58.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.0" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (334 samples, 4.94%)</title><rect x="36.0" y="227.0" width="58.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.0" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (334 samples, 4.94%)</title><rect x="36.0" y="211.0" width="58.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.0" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (334 samples, 4.94%)</title><rect x="36.0" y="195.0" width="58.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.0" y="206.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (334 samples, 4.94%)</title><rect x="36.0" y="179.0" width="58.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.0" y="190.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (334 samples, 4.94%)</title><rect x="36.0" y="163.0" width="58.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.0" y="174.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (306 samples, 4.52%)</title><rect x="36.0" y="147.0" width="53.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.0" y="158.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.next (306 samples, 4.52%)</title><rect x="36.0" y="131.0" width="53.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.0" y="142.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.next (306 samples, 4.52%)</title><rect x="36.0" y="115.0" width="53.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.0" y="126.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/SSTable.getCell (306 samples, 4.52%)</title><rect x="36.0" y="99.0" width="53.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.0" y="110.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (194 samples, 2.87%)</title><rect x="36.0" y="83.0" width="33.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.0" y="94.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (104 samples, 1.54%)</title><rect x="36.0" y="67.0" width="18.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="39.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (90 samples, 1.33%)</title><rect x="54.1" y="67.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.1" y="78.0"></text>
</g>
<g>
<title>byte[] (90 samples, 1.33%)</title><rect x="54.1" y="51.0" width="15.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="57.1" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.Cell (8 samples, 0.12%)</title><rect x="69.8" y="83.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="72.8" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.Value (13 samples, 0.19%)</title><rect x="71.2" y="83.0" width="2.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="74.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/SSTable.getOffset (91 samples, 1.34%)</title><rect x="73.5" y="83.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (91 samples, 1.34%)</title><rect x="73.5" y="67.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.5" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (58 samples, 0.86%)</title><rect x="73.5" y="51.0" width="10.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="76.5" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (33 samples, 0.49%)</title><rect x="83.6" y="51.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.6" y="62.0"></text>
</g>
<g>
<title>byte[] (33 samples, 0.49%)</title><rect x="83.6" y="35.0" width="5.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="86.6" y="46.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (28 samples, 0.41%)</title><rect x="89.3" y="147.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="92.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (28 samples, 0.41%)</title><rect x="89.3" y="131.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.compareTo (28 samples, 0.41%)</title><rect x="89.3" y="115.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.compareTo (28 samples, 0.41%)</title><rect x="89.3" y="99.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.getKey (28 samples, 0.41%)</title><rect x="89.3" y="83.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (28 samples, 0.41%)</title><rect x="89.3" y="67.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (28 samples, 0.41%)</title><rect x="89.3" y="51.0" width="4.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="92.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$79/1846813720.apply (48 samples, 0.71%)</title><rect x="94.2" y="259.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.getKey (48 samples, 0.71%)</title><rect x="94.2" y="243.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (48 samples, 0.71%)</title><rect x="94.2" y="227.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.2" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (48 samples, 0.71%)</title><rect x="94.2" y="211.0" width="8.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="97.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (72 samples, 1.06%)</title><rect x="102.6" y="339.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.6" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (72 samples, 1.06%)</title><rect x="102.6" y="323.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$81/1294824930.apply (72 samples, 1.06%)</title><rect x="102.6" y="307.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$iterator$4 (72 samples, 1.06%)</title><rect x="102.6" y="291.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.getKey (32 samples, 0.47%)</title><rect x="102.6" y="275.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (32 samples, 0.47%)</title><rect x="102.6" y="259.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.6" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (32 samples, 0.47%)</title><rect x="102.6" y="243.0" width="5.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="105.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (16 samples, 0.24%)</title><rect x="108.2" y="275.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.2" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (16 samples, 0.24%)</title><rect x="108.2" y="259.0" width="2.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="111.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Value.getData (24 samples, 0.35%)</title><rect x="111.0" y="275.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (24 samples, 0.35%)</title><rect x="111.0" y="259.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.0" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.35%)</title><rect x="111.0" y="243.0" width="4.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="114.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (26 samples, 0.38%)</title><rect x="115.1" y="339.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (26 samples, 0.38%)</title><rect x="115.1" y="323.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (26 samples, 0.38%)</title><rect x="115.1" y="307.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.1" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (26 samples, 0.38%)</title><rect x="115.1" y="291.0" width="4.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="118.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (21 samples, 0.31%)</title><rect x="119.7" y="339.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (21 samples, 0.31%)</title><rect x="119.7" y="323.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (21 samples, 0.31%)</title><rect x="119.7" y="307.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.7" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (21 samples, 0.31%)</title><rect x="119.7" y="291.0" width="3.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="122.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.iterator (2,673 samples, 39.50%)</title><rect x="123.3" y="339.0" width="466.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.3" y="350.0">ru/mail/polis/dao/impl/DAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (18 samples, 0.27%)</title><rect x="123.3" y="323.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.3" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (18 samples, 0.27%)</title><rect x="123.3" y="307.0" width="3.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="126.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (19 samples, 0.28%)</title><rect x="126.5" y="323.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="129.5" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (19 samples, 0.28%)</title><rect x="126.5" y="307.0" width="3.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="129.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (12 samples, 0.18%)</title><rect x="129.8" y="323.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.18%)</title><rect x="129.8" y="307.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (12 samples, 0.18%)</title><rect x="129.8" y="291.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.8" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (12 samples, 0.18%)</title><rect x="129.8" y="275.0" width="2.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="132.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.compactIterator (2,624 samples, 38.78%)</title><rect x="131.9" y="323.0" width="457.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.9" y="334.0">ru/mail/polis/dao/impl/DAOImpl.compactIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (452 samples, 6.68%)</title><rect x="131.9" y="307.0" width="78.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.9" y="318.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (8 samples, 0.12%)</title><rect x="131.9" y="291.0" width="1.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="134.9" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (444 samples, 6.56%)</title><rect x="133.3" y="291.0" width="77.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.3" y="302.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (16 samples, 0.24%)</title><rect x="133.3" y="275.0" width="2.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="136.3" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (28 samples, 0.41%)</title><rect x="136.1" y="275.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.1" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (28 samples, 0.41%)</title><rect x="136.1" y="259.0" width="4.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="139.1" y="270.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (22 samples, 0.33%)</title><rect x="141.0" y="275.0" width="3.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="144.0" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (16 samples, 0.24%)</title><rect x="144.8" y="275.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.8" y="286.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (16 samples, 0.24%)</title><rect x="144.8" y="259.0" width="2.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="147.8" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (12 samples, 0.18%)</title><rect x="147.6" y="275.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.6" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (12 samples, 0.18%)</title><rect x="147.6" y="259.0" width="2.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="150.6" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (350 samples, 5.17%)</title><rect x="149.7" y="275.0" width="61.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.7" y="286.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (350 samples, 5.17%)</title><rect x="149.7" y="259.0" width="61.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.7" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (350 samples, 5.17%)</title><rect x="149.7" y="243.0" width="61.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.7" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (350 samples, 5.17%)</title><rect x="149.7" y="227.0" width="61.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.7" y="238.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (350 samples, 5.17%)</title><rect x="149.7" y="211.0" width="61.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.7" y="222.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (350 samples, 5.17%)</title><rect x="149.7" y="195.0" width="61.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.7" y="206.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (322 samples, 4.76%)</title><rect x="149.7" y="179.0" width="56.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.7" y="190.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (25 samples, 0.37%)</title><rect x="149.7" y="163.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.7" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (8 samples, 0.12%)</title><rect x="149.7" y="147.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/MemTable$$Lambda$73/146991837.apply (8 samples, 0.12%)</title><rect x="149.7" y="131.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/MemTable.lambda$iterator$0 (8 samples, 0.12%)</title><rect x="149.7" y="115.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.7" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.Cell (8 samples, 0.12%)</title><rect x="149.7" y="99.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="152.7" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (17 samples, 0.25%)</title><rect x="151.1" y="147.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (17 samples, 0.25%)</title><rect x="151.1" y="131.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.1" y="142.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (17 samples, 0.25%)</title><rect x="151.1" y="115.0" width="2.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="154.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.next (297 samples, 4.39%)</title><rect x="154.0" y="163.0" width="51.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.0" y="174.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.next (297 samples, 4.39%)</title><rect x="154.0" y="147.0" width="51.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.0" y="158.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/SSTable.getCell (297 samples, 4.39%)</title><rect x="154.0" y="131.0" width="51.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.0" y="142.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (178 samples, 2.63%)</title><rect x="154.0" y="115.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.0" y="126.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (114 samples, 1.68%)</title><rect x="154.0" y="99.0" width="19.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="157.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (64 samples, 0.95%)</title><rect x="173.9" y="99.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.9" y="110.0"></text>
</g>
<g>
<title>byte[] (64 samples, 0.95%)</title><rect x="173.9" y="83.0" width="11.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="176.9" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.Cell (16 samples, 0.24%)</title><rect x="185.1" y="115.0" width="2.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="188.1" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.Value (11 samples, 0.16%)</title><rect x="187.9" y="115.0" width="1.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="190.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/SSTable.getOffset (92 samples, 1.36%)</title><rect x="189.8" y="115.0" width="16.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (92 samples, 1.36%)</title><rect x="189.8" y="99.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (57 samples, 0.84%)</title><rect x="189.8" y="83.0" width="9.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="192.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (35 samples, 0.52%)</title><rect x="199.7" y="83.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.7" y="94.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.52%)</title><rect x="199.7" y="67.0" width="6.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="202.7" y="78.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (28 samples, 0.41%)</title><rect x="205.8" y="179.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.8" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (28 samples, 0.41%)</title><rect x="205.8" y="163.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.compareTo (28 samples, 0.41%)</title><rect x="205.8" y="147.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.compareTo (28 samples, 0.41%)</title><rect x="205.8" y="131.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.getKey (28 samples, 0.41%)</title><rect x="205.8" y="115.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.8" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (28 samples, 0.41%)</title><rect x="205.8" y="99.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (28 samples, 0.41%)</title><rect x="205.8" y="83.0" width="4.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="208.8" y="94.0"></text>
</g>
<g>
<title>java.util.ArrayList (24 samples, 0.35%)</title><rect x="210.7" y="307.0" width="4.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="213.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1,704 samples, 25.18%)</title><rect x="214.9" y="307.0" width="297.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.9" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (41 samples, 0.61%)</title><rect x="214.9" y="291.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.9" y="302.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (18 samples, 0.27%)</title><rect x="214.9" y="275.0" width="3.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="217.9" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (23 samples, 0.34%)</title><rect x="218.0" y="275.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.0" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (23 samples, 0.34%)</title><rect x="218.0" y="259.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.0" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (23 samples, 0.34%)</title><rect x="218.0" y="243.0" width="4.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="221.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$77/485453178.accept (1,663 samples, 24.58%)</title><rect x="222.0" y="291.0" width="290.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.0" y="302.0">ru/mail/polis/dao/impl/DAOImpl$$Lambda$..</text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl.lambda$compactIterator$7 (1,663 samples, 24.58%)</title><rect x="222.0" y="275.0" width="290.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.0" y="286.0">ru/mail/polis/dao/impl/DAOImpl.lambda$c..</text>
</g>
<g>
<title>ru/mail/polis/SSTable.iterator (1,663 samples, 24.58%)</title><rect x="222.0" y="259.0" width="290.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.0" y="270.0">ru/mail/polis/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.SSTable$1 (14 samples, 0.21%)</title><rect x="222.0" y="243.0" width="2.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="225.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.&lt;init&gt; (1,649 samples, 24.37%)</title><rect x="224.5" y="243.0" width="287.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.5" y="254.0">ru/mail/polis/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/SSTable.getPosition (1,649 samples, 24.37%)</title><rect x="224.5" y="227.0" width="287.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.5" y="238.0">ru/mail/polis/SSTable.getPosition</text>
</g>
<g>
<title>ru/mail/polis/SSTable.getKey (1,649 samples, 24.37%)</title><rect x="224.5" y="211.0" width="287.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.5" y="222.0">ru/mail/polis/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,105 samples, 16.33%)</title><rect x="224.5" y="195.0" width="192.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.5" y="206.0">java/nio/ByteBuffer.alloc..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (749 samples, 11.07%)</title><rect x="224.5" y="179.0" width="130.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="227.5" y="190.0">java.nio.HeapByt..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (356 samples, 5.26%)</title><rect x="355.1" y="179.0" width="62.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.1" y="190.0">java/n..</text>
</g>
<g>
<title>byte[] (356 samples, 5.26%)</title><rect x="355.1" y="163.0" width="62.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="358.1" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/SSTable.getOffset (544 samples, 8.04%)</title><rect x="417.2" y="195.0" width="94.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.2" y="206.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (544 samples, 8.04%)</title><rect x="417.2" y="179.0" width="94.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.2" y="190.0">java/nio/By..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (369 samples, 5.45%)</title><rect x="417.2" y="163.0" width="64.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="420.2" y="174.0">java.ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (175 samples, 2.59%)</title><rect x="481.5" y="163.0" width="30.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.5" y="174.0">ja..</text>
</g>
<g>
<title>byte[] (175 samples, 2.59%)</title><rect x="481.5" y="147.0" width="30.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="484.5" y="158.0">by..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (12 samples, 0.18%)</title><rect x="512.0" y="307.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="515.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (12 samples, 0.18%)</title><rect x="512.0" y="291.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/DAOImpl$$Lambda$78/1265241381.get$Lambda (12 samples, 0.18%)</title><rect x="512.0" y="275.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.0" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.impl.DAOImpl$$Lambda$78 (12 samples, 0.18%)</title><rect x="512.0" y="259.0" width="2.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="515.0" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (19 samples, 0.28%)</title><rect x="514.1" y="307.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.1" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (19 samples, 0.28%)</title><rect x="514.1" y="291.0" width="3.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="517.1" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (24 samples, 0.35%)</title><rect x="517.4" y="307.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (24 samples, 0.35%)</title><rect x="517.4" y="291.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="520.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (24 samples, 0.35%)</title><rect x="517.4" y="275.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (24 samples, 0.35%)</title><rect x="517.4" y="259.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.4" y="270.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (24 samples, 0.35%)</title><rect x="517.4" y="243.0" width="4.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="520.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/MemTable.iterator (70 samples, 1.03%)</title><rect x="521.6" y="307.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.6" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (15 samples, 0.22%)</title><rect x="521.6" y="291.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.6" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (15 samples, 0.22%)</title><rect x="521.6" y="275.0" width="2.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="524.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (19 samples, 0.28%)</title><rect x="524.2" y="291.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.2" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (19 samples, 0.28%)</title><rect x="524.2" y="275.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="527.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (14 samples, 0.21%)</title><rect x="527.5" y="291.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.5" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (14 samples, 0.21%)</title><rect x="527.5" y="275.0" width="2.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="530.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (22 samples, 0.33%)</title><rect x="530.0" y="291.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (22 samples, 0.33%)</title><rect x="530.0" y="275.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (22 samples, 0.33%)</title><rect x="530.0" y="259.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.0" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (22 samples, 0.33%)</title><rect x="530.0" y="243.0" width="3.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="533.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (319 samples, 4.71%)</title><rect x="533.8" y="307.0" width="55.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.8" y="318.0">ru/ma..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (11 samples, 0.16%)</title><rect x="533.8" y="291.0" width="1.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="536.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (308 samples, 4.55%)</title><rect x="535.7" y="291.0" width="53.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.7" y="302.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (308 samples, 4.55%)</title><rect x="535.7" y="275.0" width="53.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.7" y="286.0">com/g..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (308 samples, 4.55%)</title><rect x="535.7" y="259.0" width="53.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="538.7" y="270.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (308 samples, 4.55%)</title><rect x="535.7" y="243.0" width="53.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="538.7" y="254.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (308 samples, 4.55%)</title><rect x="535.7" y="227.0" width="53.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.7" y="238.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (308 samples, 4.55%)</title><rect x="535.7" y="211.0" width="53.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.7" y="222.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (308 samples, 4.55%)</title><rect x="535.7" y="195.0" width="53.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="538.7" y="206.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (308 samples, 4.55%)</title><rect x="535.7" y="179.0" width="53.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="538.7" y="190.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (281 samples, 4.15%)</title><rect x="535.7" y="163.0" width="49.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.7" y="174.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.next (281 samples, 4.15%)</title><rect x="535.7" y="147.0" width="49.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.7" y="158.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/SSTable$1.next (281 samples, 4.15%)</title><rect x="535.7" y="131.0" width="49.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="538.7" y="142.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/SSTable.getCell (281 samples, 4.15%)</title><rect x="535.7" y="115.0" width="49.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="538.7" y="126.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (150 samples, 2.22%)</title><rect x="535.7" y="99.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.7" y="110.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (84 samples, 1.24%)</title><rect x="535.7" y="83.0" width="14.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="538.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (66 samples, 0.98%)</title><rect x="550.4" y="83.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.4" y="94.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.98%)</title><rect x="550.4" y="67.0" width="11.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="553.4" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.Cell (14 samples, 0.21%)</title><rect x="561.9" y="99.0" width="2.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="564.9" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.Value (14 samples, 0.21%)</title><rect x="564.3" y="99.0" width="2.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="567.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/SSTable.getOffset (103 samples, 1.52%)</title><rect x="566.8" y="99.0" width="17.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (103 samples, 1.52%)</title><rect x="566.8" y="83.0" width="17.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (69 samples, 1.02%)</title><rect x="566.8" y="67.0" width="12.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="569.8" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (34 samples, 0.50%)</title><rect x="578.8" y="67.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.8" y="78.0"></text>
</g>
<g>
<title>byte[] (34 samples, 0.50%)</title><rect x="578.8" y="51.0" width="5.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="581.8" y="62.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (27 samples, 0.40%)</title><rect x="584.7" y="163.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (27 samples, 0.40%)</title><rect x="584.7" y="147.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.compareTo (27 samples, 0.40%)</title><rect x="584.7" y="131.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.compareTo (27 samples, 0.40%)</title><rect x="584.7" y="115.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="587.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/Cell.getKey (27 samples, 0.40%)</title><rect x="584.7" y="99.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (27 samples, 0.40%)</title><rect x="584.7" y="83.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (27 samples, 0.40%)</title><rect x="584.7" y="67.0" width="4.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="587.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.equalsUrlNode (111 samples, 1.64%)</title><rect x="589.5" y="355.0" width="19.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="592.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/TopologyImpl.getNodeByKey (111 samples, 1.64%)</title><rect x="589.5" y="339.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="592.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/impl/TopologyImpl.getNodeByKey (111 samples, 1.64%)</title><rect x="589.5" y="323.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="592.5" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (111 samples, 1.64%)</title><rect x="589.5" y="307.0" width="19.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="592.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1019384604.invoke (111 samples, 1.64%)</title><rect x="589.5" y="291.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (111 samples, 1.64%)</title><rect x="589.5" y="275.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.5" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (111 samples, 1.64%)</title><rect x="589.5" y="259.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (111 samples, 1.64%)</title><rect x="589.5" y="243.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.5" y="254.0"></text>
</g>
<g>
<title>byte[] (111 samples, 1.64%)</title><rect x="589.5" y="227.0" width="19.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="592.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.toByteArray (25 samples, 0.37%)</title><rect x="608.8" y="355.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.8" y="366.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.37%)</title><rect x="608.8" y="339.0" width="4.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="611.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.toByteBuffer (46 samples, 0.68%)</title><rect x="613.2" y="355.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (13 samples, 0.19%)</title><rect x="613.2" y="339.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (13 samples, 0.19%)</title><rect x="613.2" y="323.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="616.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (13 samples, 0.19%)</title><rect x="613.2" y="307.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.2" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.19%)</title><rect x="613.2" y="291.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.2" y="302.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.19%)</title><rect x="613.2" y="275.0" width="2.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="616.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (33 samples, 0.49%)</title><rect x="615.4" y="339.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="618.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (33 samples, 0.49%)</title><rect x="615.4" y="323.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.4" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (33 samples, 0.49%)</title><rect x="615.4" y="307.0" width="5.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="618.4" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,262 samples, 48.20%)</title><rect x="621.2" y="435.0" width="568.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.2" y="446.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (109 samples, 1.61%)</title><rect x="621.2" y="419.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.2" y="430.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (109 samples, 1.61%)</title><rect x="621.2" y="403.0" width="19.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="624.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,153 samples, 46.59%)</title><rect x="640.2" y="419.0" width="549.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.2" y="430.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,153 samples, 46.59%)</title><rect x="640.2" y="403.0" width="549.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.2" y="414.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,153 samples, 46.59%)</title><rect x="640.2" y="387.0" width="549.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.2" y="398.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (761 samples, 11.25%)</title><rect x="640.2" y="371.0" width="132.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.2" y="382.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (761 samples, 11.25%)</title><rect x="640.2" y="355.0" width="132.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.2" y="366.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (416 samples, 6.15%)</title><rect x="640.2" y="339.0" width="72.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.2" y="350.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (286 samples, 4.23%)</title><rect x="640.2" y="323.0" width="49.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.2" y="334.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (286 samples, 4.23%)</title><rect x="640.2" y="307.0" width="49.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.2" y="318.0">one/n..</text>
</g>
<g>
<title>java/lang/String.substring (286 samples, 4.23%)</title><rect x="640.2" y="291.0" width="49.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.2" y="302.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (286 samples, 4.23%)</title><rect x="640.2" y="275.0" width="49.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.2" y="286.0">java/..</text>
</g>
<g>
<title>java.lang.String (140 samples, 2.07%)</title><rect x="640.2" y="259.0" width="24.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="643.2" y="270.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (146 samples, 2.16%)</title><rect x="664.6" y="259.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.6" y="270.0">j..</text>
</g>
<g>
<title>byte[] (146 samples, 2.16%)</title><rect x="664.6" y="243.0" width="25.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="667.6" y="254.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController.get (130 samples, 1.92%)</title><rect x="690.1" y="323.0" width="22.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="693.1" y="334.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (129 samples, 1.91%)</title><rect x="690.1" y="307.0" width="22.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.1" y="318.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (129 samples, 1.91%)</title><rect x="690.1" y="291.0" width="22.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.1" y="302.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/ivlev/ThreadController$$Lambda$74/1788524259.get$Lambda (129 samples, 1.91%)</title><rect x="690.1" y="275.0" width="22.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.1" y="286.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.ivlev.ThreadController$$Lambda$74 (129 samples, 1.91%)</title><rect x="690.1" y="259.0" width="22.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="693.1" y="270.0">r..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (345 samples, 5.10%)</title><rect x="712.7" y="339.0" width="60.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.7" y="350.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.substring (345 samples, 5.10%)</title><rect x="712.7" y="323.0" width="60.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.7" y="334.0">java/l..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (345 samples, 5.10%)</title><rect x="712.7" y="307.0" width="60.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="715.7" y="318.0">java/l..</text>
</g>
<g>
<title>java.lang.String (169 samples, 2.50%)</title><rect x="712.7" y="291.0" width="29.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="715.7" y="302.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (176 samples, 2.60%)</title><rect x="742.2" y="291.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="745.2" y="302.0">ja..</text>
</g>
<g>
<title>byte[] (176 samples, 2.60%)</title><rect x="742.2" y="275.0" width="30.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="745.2" y="286.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,696 samples, 25.06%)</title><rect x="772.9" y="371.0" width="295.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="775.9" y="382.0">one/nio/http/HttpSession.parseRequest</text>
</g>
<g>
<title>one.nio.http.Request (243 samples, 3.59%)</title><rect x="772.9" y="355.0" width="42.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="775.9" y="366.0">one...</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (605 samples, 8.94%)</title><rect x="815.3" y="355.0" width="105.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.3" y="366.0">one/nio/http/..</text>
</g>
<g>
<title>java.lang.String[] (605 samples, 8.94%)</title><rect x="815.3" y="339.0" width="105.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="818.3" y="350.0">java.lang.Str..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (848 samples, 12.53%)</title><rect x="920.8" y="355.0" width="147.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.8" y="366.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (848 samples, 12.53%)</title><rect x="920.8" y="339.0" width="147.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="923.8" y="350.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>char[] (462 samples, 6.83%)</title><rect x="920.8" y="323.0" width="80.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="923.8" y="334.0">char[]</text>
</g>
<g>
<title>java.lang.String (146 samples, 2.16%)</title><rect x="1001.3" y="323.0" width="25.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1004.3" y="334.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (240 samples, 3.55%)</title><rect x="1026.8" y="323.0" width="41.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1029.8" y="334.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (240 samples, 3.55%)</title><rect x="1026.8" y="307.0" width="41.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1029.8" y="318.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (240 samples, 3.55%)</title><rect x="1026.8" y="291.0" width="41.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1029.8" y="302.0">jav..</text>
</g>
<g>
<title>byte[] (240 samples, 3.55%)</title><rect x="1026.8" y="275.0" width="41.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1029.8" y="286.0">byt..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (696 samples, 10.29%)</title><rect x="1068.6" y="371.0" width="121.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.6" y="382.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (696 samples, 10.29%)</title><rect x="1068.6" y="355.0" width="121.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1071.6" y="366.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (309 samples, 4.57%)</title><rect x="1068.6" y="339.0" width="53.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1071.6" y="350.0">char[]</text>
</g>
<g>
<title>java.lang.String (137 samples, 2.02%)</title><rect x="1122.5" y="339.0" width="23.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1125.5" y="350.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (250 samples, 3.69%)</title><rect x="1146.4" y="339.0" width="43.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1149.4" y="350.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (250 samples, 3.69%)</title><rect x="1146.4" y="323.0" width="43.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1149.4" y="334.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (250 samples, 3.69%)</title><rect x="1146.4" y="307.0" width="43.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1149.4" y="318.0">java..</text>
</g>
<g>
<title>byte[] (250 samples, 3.69%)</title><rect x="1146.4" y="291.0" width="43.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1149.4" y="302.0">byte[]</text>
</g>
</g>
</svg>
