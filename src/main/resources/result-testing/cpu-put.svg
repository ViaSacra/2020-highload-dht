<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (309 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (235 samples, 76.05%)</title><rect x="10.0" y="307.0" width="897.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.97%)</title><rect x="13.8" y="291.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.97%)</title><rect x="13.8" y="275.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.97%)</title><rect x="13.8" y="259.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="270.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (24 samples, 7.77%)</title><rect x="25.3" y="291.0" width="91.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.3" y="302.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (24 samples, 7.77%)</title><rect x="25.3" y="275.0" width="91.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.3" y="286.0">one/nio/net..</text>
</g>
<g>
<title>clock_gettime (14 samples, 4.53%)</title><rect x="32.9" y="259.0" width="53.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="35.9" y="270.0">clock..</text>
</g>
<g>
<title>clock_gettime (5 samples, 1.62%)</title><rect x="67.3" y="243.0" width="19.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="70.3" y="254.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 1.62%)</title><rect x="67.3" y="227.0" width="19.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="70.3" y="238.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.32%)</title><rect x="86.4" y="259.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="89.4" y="270.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 2.27%)</title><rect x="90.2" y="259.0" width="26.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="93.2" y="270.0">e..</text>
</g>
<g>
<title>one/nio/net/Session.process (206 samples, 66.67%)</title><rect x="116.9" y="291.0" width="786.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.9" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (205 samples, 66.34%)</title><rect x="120.7" y="275.0" width="782.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.7" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (179 samples, 57.93%)</title><rect x="120.7" y="259.0" width="683.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.7" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (153 samples, 49.51%)</title><rect x="139.8" y="243.0" width="584.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.8" y="254.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (152 samples, 49.19%)</title><rect x="143.7" y="227.0" width="580.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.7" y="238.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (144 samples, 46.60%)</title><rect x="143.7" y="211.0" width="549.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.7" y="222.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (38 samples, 12.30%)</title><rect x="143.7" y="195.0" width="145.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.7" y="206.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (32 samples, 10.36%)</title><rect x="143.7" y="179.0" width="122.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.7" y="190.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 1.94%)</title><rect x="143.7" y="163.0" width="22.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.7" y="174.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.97%)</title><rect x="155.1" y="147.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.97%)</title><rect x="155.1" y="131.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.97%)</title><rect x="155.1" y="115.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.1" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 8.41%)</title><rect x="166.6" y="163.0" width="99.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.6" y="174.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 8.41%)</title><rect x="166.6" y="147.0" width="99.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.6" y="158.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (26 samples, 8.41%)</title><rect x="166.6" y="131.0" width="99.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.6" y="142.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (26 samples, 8.41%)</title><rect x="166.6" y="115.0" width="99.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.6" y="126.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 1.29%)</title><rect x="174.2" y="99.0" width="15.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="177.2" y="110.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 1.29%)</title><rect x="174.2" y="83.0" width="15.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="177.2" y="94.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.32%)</title><rect x="185.7" y="67.0" width="3.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="188.7" y="78.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.32%)</title><rect x="185.7" y="51.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="188.7" y="62.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.32%)</title><rect x="189.5" y="99.0" width="3.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="192.5" y="110.0"></text>
</g>
<g>
<title>__send (19 samples, 6.15%)</title><rect x="193.3" y="99.0" width="72.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="196.3" y="110.0">__send</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 1.94%)</title><rect x="265.9" y="179.0" width="22.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.9" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.32%)</title><rect x="285.0" y="163.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.32%)</title><rect x="285.0" y="147.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3 samples, 0.97%)</title><rect x="288.8" y="195.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.65%)</title><rect x="288.8" y="179.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.8" y="190.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.32%)</title><rect x="288.8" y="163.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.32%)</title><rect x="288.8" y="147.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.32%)</title><rect x="292.6" y="163.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.6" y="174.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.32%)</title><rect x="296.4" y="179.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.put (103 samples, 33.33%)</title><rect x="300.2" y="195.0" width="393.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.2" y="206.0">ru/mail/polis/service/boriskin/NewService.put</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (103 samples, 33.33%)</title><rect x="300.2" y="179.0" width="393.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.2" y="190.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.65%)</title><rect x="300.2" y="163.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.65%)</title><rect x="300.2" y="147.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.2" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="304.0" y="131.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="307.0" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="304.0" y="115.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="307.0" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.32%)</title><rect x="304.0" y="99.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="307.0" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.32%)</title><rect x="304.0" y="83.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="307.0" y="94.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.32%)</title><rect x="304.0" y="67.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="307.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (101 samples, 32.69%)</title><rect x="307.9" y="163.0" width="385.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.9" y="174.0">ru/mail/polis/dao/boriskin/NewDAO.upsert</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (39 samples, 12.62%)</title><rect x="307.9" y="147.0" width="148.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.9" y="158.0">ru/mail/polis/dao/b..</text>
</g>
<g>
<title>java/util/TreeMap.put (36 samples, 11.65%)</title><rect x="307.9" y="131.0" width="137.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.9" y="142.0">java/util/TreeMap..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (22 samples, 7.12%)</title><rect x="346.1" y="115.0" width="84.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.1" y="126.0">java/nio/B..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 6.15%)</title><rect x="357.5" y="99.0" width="72.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.5" y="110.0">java/nio..</text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 1.94%)</title><rect x="369.0" y="83.0" width="22.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.0" y="94.0">j..</text>
</g>
<g>
<title>vectorizedMismatch (6 samples, 1.94%)</title><rect x="369.0" y="67.0" width="22.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="372.0" y="78.0">v..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 3.24%)</title><rect x="391.9" y="83.0" width="38.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.9" y="94.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 1.29%)</title><rect x="414.8" y="67.0" width="15.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.8" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.32%)</title><rect x="422.4" y="51.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.32%)</title><rect x="426.2" y="51.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.2" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.32%)</title><rect x="430.1" y="115.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.1" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (3 samples, 0.97%)</title><rect x="433.9" y="115.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="436.9" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (1 samples, 0.32%)</title><rect x="441.5" y="99.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/Value.valueOf (3 samples, 0.97%)</title><rect x="445.3" y="131.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.3" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.32%)</title><rect x="445.3" y="115.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.32%)</title><rect x="445.3" y="99.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.32%)</title><rect x="445.3" y="83.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/Utils.getTime (2 samples, 0.65%)</title><rect x="449.2" y="115.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/TimeUnit.toNanos (2 samples, 0.65%)</title><rect x="449.2" y="99.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.2" y="110.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.32%)</title><rect x="449.2" y="83.0" width="3.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="452.2" y="94.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="453.0" y="83.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="456.0" y="94.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.32%)</title><rect x="453.0" y="67.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="456.0" y="78.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="453.0" y="51.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="456.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (62 samples, 20.06%)</title><rect x="456.8" y="147.0" width="236.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.8" y="158.0">ru/mail/polis/dao/boriskin/NewD..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (62 samples, 20.06%)</title><rect x="456.8" y="131.0" width="236.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="459.8" y="142.0">ru/mail/polis/dao/boriskin/Sort..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.32%)</title><rect x="456.8" y="115.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.8" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.32%)</title><rect x="456.8" y="99.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$54/226181815.apply (1 samples, 0.32%)</title><rect x="456.8" y="83.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="459.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (1 samples, 0.32%)</title><rect x="456.8" y="67.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.&lt;init&gt; (1 samples, 0.32%)</title><rect x="456.8" y="51.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.8" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (61 samples, 19.74%)</title><rect x="460.6" y="115.0" width="233.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.6" y="126.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 1.62%)</title><rect x="464.4" y="99.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.4" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 1.62%)</title><rect x="464.4" y="83.0" width="19.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.4" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.97%)</title><rect x="472.1" y="67.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.1" y="78.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.97%)</title><rect x="472.1" y="51.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.1" y="62.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.97%)</title><rect x="472.1" y="35.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.1" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.65%)</title><rect x="483.5" y="99.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.5" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.65%)</title><rect x="483.5" y="83.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.5" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.32%)</title><rect x="487.3" y="67.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.3" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (1 samples, 0.32%)</title><rect x="487.3" y="51.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.3" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 17.15%)</title><rect x="491.2" y="99.0" width="202.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.2" y="110.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.32%)</title><rect x="498.8" y="83.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.8" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.32%)</title><rect x="498.8" y="67.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.8" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.32%)</title><rect x="498.8" y="51.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.8" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (46 samples, 14.89%)</title><rect x="502.6" y="83.0" width="175.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.6" y="94.0">sun/nio/ch/IOUtil.write..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (46 samples, 14.89%)</title><rect x="502.6" y="67.0" width="175.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.6" y="78.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (46 samples, 14.89%)</title><rect x="502.6" y="51.0" width="175.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.6" y="62.0">sun/nio/ch/FileDispatch..</text>
</g>
<g>
<title>__libc_write (39 samples, 12.62%)</title><rect x="525.5" y="35.0" width="149.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="528.5" y="46.0">__libc_write</text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.32%)</title><rect x="674.5" y="35.0" width="3.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="677.5" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.65%)</title><rect x="678.3" y="83.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.3" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="682.1" y="67.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.65%)</title><rect x="685.9" y="83.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (2 samples, 0.65%)</title><rect x="685.9" y="67.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="688.9" y="78.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 1.94%)</title><rect x="693.6" y="211.0" width="22.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.6" y="222.0">o..</text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 1.94%)</title><rect x="693.6" y="195.0" width="22.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="696.6" y="206.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="697.4" y="179.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="700.4" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 1.29%)</title><rect x="701.2" y="179.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.65%)</title><rect x="708.8" y="163.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.65%)</title><rect x="708.8" y="147.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.65%)</title><rect x="708.8" y="131.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="711.8" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.65%)</title><rect x="716.5" y="211.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.65%)</title><rect x="716.5" y="195.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.65%)</title><rect x="716.5" y="179.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.32%)</title><rect x="716.5" y="163.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.5" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.32%)</title><rect x="720.3" y="163.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 3.88%)</title><rect x="724.1" y="243.0" width="45.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="727.1" y="254.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 1.62%)</title><rect x="724.1" y="227.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="727.1" y="238.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.32%)</title><rect x="727.9" y="211.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.97%)</title><rect x="731.7" y="211.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.97%)</title><rect x="731.7" y="195.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.97%)</title><rect x="731.7" y="179.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3 samples, 0.97%)</title><rect x="731.7" y="163.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.7" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 2.27%)</title><rect x="743.2" y="227.0" width="26.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.2" y="238.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 2.27%)</title><rect x="743.2" y="211.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.2" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.97%)</title><rect x="758.5" y="195.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.65%)</title><rect x="758.5" y="179.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.32%)</title><rect x="766.1" y="179.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.1" y="190.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.32%)</title><rect x="766.1" y="163.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.1" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.32%)</title><rect x="769.9" y="243.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="772.9" y="254.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.32%)</title><rect x="769.9" y="227.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="772.9" y="238.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.32%)</title><rect x="769.9" y="211.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="772.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.32%)</title><rect x="769.9" y="195.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.32%)</title><rect x="769.9" y="179.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.9" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.32%)</title><rect x="773.8" y="243.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 1.62%)</title><rect x="777.6" y="243.0" width="19.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 1.62%)</title><rect x="777.6" y="227.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 1.62%)</title><rect x="777.6" y="211.0" width="19.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.6" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 1.62%)</title><rect x="777.6" y="195.0" width="19.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.6" y="206.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 1.62%)</title><rect x="777.6" y="179.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.6" y="190.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (4 samples, 1.29%)</title><rect x="777.6" y="163.0" width="15.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.6" y="174.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.32%)</title><rect x="792.8" y="163.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.8" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.65%)</title><rect x="796.7" y="243.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.7" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.65%)</title><rect x="796.7" y="227.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.32%)</title><rect x="800.5" y="211.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.32%)</title><rect x="800.5" y="195.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.32%)</title><rect x="800.5" y="179.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (1 samples, 0.32%)</title><rect x="800.5" y="163.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.5" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (26 samples, 8.41%)</title><rect x="804.3" y="259.0" width="99.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="807.3" y="270.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (25 samples, 8.09%)</title><rect x="808.1" y="243.0" width="95.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.1" y="254.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 1.62%)</title><rect x="811.9" y="227.0" width="19.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="814.9" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.32%)</title><rect x="811.9" y="211.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="814.9" y="222.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.32%)</title><rect x="815.8" y="211.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="818.8" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.65%)</title><rect x="819.6" y="211.0" width="7.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="822.6" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.32%)</title><rect x="823.4" y="195.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="826.4" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.32%)</title><rect x="827.2" y="211.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.2" y="222.0"></text>
</g>
<g>
<title>recv (19 samples, 6.15%)</title><rect x="831.0" y="227.0" width="72.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="834.0" y="238.0">recv</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="903.6" y="291.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="906.6" y="302.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.32%)</title><rect x="903.6" y="275.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="906.6" y="286.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="903.6" y="259.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="906.6" y="270.0"></text>
</g>
<g>
<title>start_thread (74 samples, 23.95%)</title><rect x="907.4" y="307.0" width="282.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="910.4" y="318.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 23.95%)</title><rect x="907.4" y="291.0" width="282.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="910.4" y="302.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (74 samples, 23.95%)</title><rect x="907.4" y="275.0" width="282.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.4" y="286.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (73 samples, 23.62%)</title><rect x="907.4" y="259.0" width="278.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="910.4" y="270.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (4 samples, 1.29%)</title><rect x="907.4" y="243.0" width="15.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="910.4" y="254.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (4 samples, 1.29%)</title><rect x="907.4" y="227.0" width="15.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="910.4" y="238.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (3 samples, 0.97%)</title><rect x="907.4" y="211.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.4" y="222.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (3 samples, 0.97%)</title><rect x="907.4" y="195.0" width="11.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.4" y="206.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (3 samples, 0.97%)</title><rect x="907.4" y="179.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.4" y="190.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.97%)</title><rect x="907.4" y="163.0" width="11.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.4" y="174.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.97%)</title><rect x="907.4" y="147.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="910.4" y="158.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (1 samples, 0.32%)</title><rect x="918.9" y="211.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.9" y="222.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.32%)</title><rect x="918.9" y="195.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.9" y="206.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.32%)</title><rect x="918.9" y="179.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.9" y="190.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (64 samples, 20.71%)</title><rect x="922.7" y="243.0" width="244.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="925.7" y="254.0">G1ParTask::work(unsigned int)</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (55 samples, 17.80%)</title><rect x="922.7" y="227.0" width="210.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="925.7" y="238.0">G1ParEvacuateFollowersClosur..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (47 samples, 15.21%)</title><rect x="938.0" y="211.0" width="179.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.0" y="222.0">G1ParScanThreadState::t..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (27 samples, 8.74%)</title><rect x="1010.5" y="195.0" width="103.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.5" y="206.0">G1ParScanThr..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (7 samples, 2.27%)</title><rect x="1086.9" y="179.0" width="26.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.9" y="190.0">v..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.32%)</title><rect x="1113.6" y="195.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.6" y="206.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.29%)</title><rect x="1117.4" y="211.0" width="15.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1120.4" y="222.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (8 samples, 2.59%)</title><rect x="1132.7" y="227.0" width="30.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.7" y="238.0">G1..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 2.59%)</title><rect x="1132.7" y="211.0" width="30.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.7" y="222.0">G1..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (8 samples, 2.59%)</title><rect x="1132.7" y="195.0" width="30.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.7" y="206.0">G1..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (8 samples, 2.59%)</title><rect x="1132.7" y="179.0" width="30.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.7" y="190.0">Di..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 2.27%)</title><rect x="1132.7" y="163.0" width="26.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.7" y="174.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 1.29%)</title><rect x="1132.7" y="147.0" width="15.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.7" y="158.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.65%)</title><rect x="1140.4" y="131.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.4" y="142.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (3 samples, 0.97%)</title><rect x="1148.0" y="147.0" width="11.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="158.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.97%)</title><rect x="1148.0" y="131.0" width="11.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.0" y="142.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.32%)</title><rect x="1148.0" y="115.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.0" y="126.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.520] (2 samples, 0.65%)</title><rect x="1151.8" y="115.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.8" y="126.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.32%)</title><rect x="1159.4" y="163.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="174.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.32%)</title><rect x="1163.3" y="227.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="238.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.32%)</title><rect x="1163.3" y="211.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.3" y="222.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.32%)</title><rect x="1163.3" y="195.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="206.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.32%)</title><rect x="1163.3" y="179.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.32%)</title><rect x="1163.3" y="163.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="174.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.32%)</title><rect x="1163.3" y="147.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.32%)</title><rect x="1163.3" y="131.0" width="3.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1166.3" y="142.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (4 samples, 1.29%)</title><rect x="1167.1" y="243.0" width="15.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="254.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (4 samples, 1.29%)</title><rect x="1167.1" y="227.0" width="15.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="238.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (4 samples, 1.29%)</title><rect x="1167.1" y="211.0" width="15.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="222.0"></text>
</g>
<g>
<title>java_lang_Class::static_oop_field_count(oopDesc*) (1 samples, 0.32%)</title><rect x="1170.9" y="195.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.9" y="206.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.65%)</title><rect x="1174.7" y="195.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="206.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.32%)</title><rect x="1182.4" y="243.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="254.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.32%)</title><rect x="1186.2" y="259.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="270.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.32%)</title><rect x="1186.2" y="243.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.32%)</title><rect x="1186.2" y="227.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="238.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.32%)</title><rect x="1186.2" y="211.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="222.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.32%)</title><rect x="1186.2" y="195.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.32%)</title><rect x="1186.2" y="179.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.32%)</title><rect x="1186.2" y="163.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="174.0"></text>
</g>
<g>
<title>G1EvacuationClosures::raw_strong_oops() (1 samples, 0.32%)</title><rect x="1186.2" y="147.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="158.0"></text>
</g>
</g>
</svg>
